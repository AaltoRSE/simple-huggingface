{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "030cf3e6-158d-49ee-b005-46385ade00ba",
   "metadata": {},
   "source": [
    "# Model training with Hugging Face"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28ea9805-87e0-462d-b1ed-f6626676ce7f",
   "metadata": {},
   "source": [
    "## Model setup"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcb4e244-08d1-4e24-a0ed-e01e315273ff",
   "metadata": {},
   "source": [
    "Let's consider a simple CNN model that trains on MNIST dataset to predict handwritten digits.\n",
    "\n",
    "The example model is similar to the one shown in the [intro-to-dl](https://github.com/csc-training/intro-to-dl/blob/master/day1/README.md#exercise-3)-course."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc3ea82f-dc54-4055-8dca-0e3c41e7210d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "# Here environment variable WRKDIR points to a personal work directory\n",
    "os.environ[\"HF_HOME\"] = f\"{os.environ[\"WRKDIR\"]}/huggingface\"\n",
    "os.environ[\"HF_TOKEN_PATH\"] = \"~/.cache/huggingface/token\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "94d08ca7-bf72-48ad-a378-8057105c9d37",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import transformers\n",
    "\n",
    "from torchvision import datasets\n",
    "from torch.utils.data import DataLoader\n",
    "from torchvision.transforms import ToTensor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "661e9b9c-303e-4b47-ab26-d87a6d2d4436",
   "metadata": {},
   "source": [
    "Let's define the data loaders for the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "700aa96b-b293-4728-a959-273a4d1689bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = './data'\n",
    "\n",
    "batch_size = 32\n",
    "\n",
    "train_dataset = datasets.MNIST(data_dir, train=True, download=True, transform=ToTensor())\n",
    "test_dataset = datasets.MNIST(data_dir, train=False, transform=ToTensor())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6418f384-31cf-48ca-bfb6-92c2d277772d",
   "metadata": {},
   "source": [
    "Let's define the model architecture:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a37f295c-f101-4da1-90ee-7978987ee6ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SimpleCNN(\n",
      "  (layers): Sequential(\n",
      "    (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)\n",
      "    (1): ReLU()\n",
      "    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "    (3): Flatten(start_dim=1, end_dim=-1)\n",
      "    (4): Linear(in_features=5408, out_features=128, bias=True)\n",
      "    (5): ReLU()\n",
      "    (6): Linear(in_features=128, out_features=10, bias=True)\n",
      "  )\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "from torch import nn\n",
    "\n",
    "device = 'cuda' if torch.cuda.is_available() else 'cpu'\n",
    "\n",
    "class SimpleCNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.layers = nn.Sequential(\n",
    "            nn.Conv2d(1, 32, kernel_size=3, padding='valid'),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=2),\n",
    "            nn.Flatten(),\n",
    "            nn.Linear(32*13*13, 128),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(128, 10)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.layers(x)\n",
    "\n",
    "model = SimpleCNN().to(device)\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "610cab13-3727-4c93-81ea-a3956c376da5",
   "metadata": {},
   "source": [
    "## Data loading and Trainer setup "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5266bc5-7eb6-40b9-88c2-b9b666be909a",
   "metadata": {},
   "source": [
    "Now we could write our own training loop that would train the model, but we can also use Hugging Face [Trainer](https://huggingface.co/docs/transformers/main/trainer).\n",
    "\n",
    "Given a model and the datasets we want to use, Trainer will automatically handle the model training.\n",
    "\n",
    "Trainer will automatically create DataLoaders for the datasets that we have, but depending on the data you might need to specify a [data collator](https://huggingface.co/docs/transformers/main_classes/data_collator) that combines individual data instances into batches.\n",
    "\n",
    "Because the data coming from Torchvision datasets contains a tuple of an image tensor and corresponding label, we can combine the data into batches with the following collator function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ce4fb3d0-995e-42d4-8717-c203aede65b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def collator_fn(data):\n",
    "    images = torch.stack([d[0] for d in data])\n",
    "    labels = torch.tensor([d[1] for d in data])\n",
    "    return {\"images\":images, \"labels\":labels}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6d732b8-e753-445c-85df-23e6e5c3ce1b",
   "metadata": {},
   "source": [
    "To train the model we need to specify the loss function that we optimize. This is usually achieved by [extending the Trainer-class](https://huggingface.co/docs/transformers/main/trainer#customize).\n",
    "\n",
    "Our new `MNISTTrainer` specifies the loss calculation in the `compute_loss`-function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e7aa063e-5332-4b19-9c93-8818e0469945",
   "metadata": {},
   "outputs": [],
   "source": [
    "from transformers import Trainer\n",
    "\n",
    "class MNISTTrainer(Trainer):\n",
    "    def compute_loss(self, model, inputs, return_outputs=False, num_items_in_batch=None):\n",
    "        images = inputs.pop('images')\n",
    "        target = inputs.pop('labels')\n",
    "        output = model(images)\n",
    "        criterion = nn.CrossEntropyLoss()\n",
    "        loss = criterion(output, target)\n",
    "        return (loss, outputs) if return_outputs else loss\n",
    "\n",
    "trainer = MNISTTrainer(\n",
    "    model=model,\n",
    "    train_dataset=train_dataset,\n",
    "    eval_dataset=test_dataset,\n",
    "    data_collator=collator_fn,\n",
    ")\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94cb423b-a0c6-4353-b6ee-ae3e9305189f",
   "metadata": {},
   "source": [
    "Now that we have the Trainer specified, we can train the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "06fa128a-8a26-4929-b496-aeef92b7020f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='22500' max='22500' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [22500/22500 00:43, Epoch 3/3]\n",
       "    </div>\n",
       "    <table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       " <tr style=\"text-align: left;\">\n",
       "      <th>Step</th>\n",
       "      <th>Training Loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>500</td>\n",
       "      <td>1.627500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1000</td>\n",
       "      <td>0.758000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1500</td>\n",
       "      <td>0.490400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2000</td>\n",
       "      <td>0.393400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2500</td>\n",
       "      <td>0.359800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3000</td>\n",
       "      <td>0.346300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3500</td>\n",
       "      <td>0.312300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4000</td>\n",
       "      <td>0.331600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4500</td>\n",
       "      <td>0.313500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5000</td>\n",
       "      <td>0.292200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5500</td>\n",
       "      <td>0.315700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6000</td>\n",
       "      <td>0.273300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6500</td>\n",
       "      <td>0.301700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7000</td>\n",
       "      <td>0.285800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7500</td>\n",
       "      <td>0.276600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8000</td>\n",
       "      <td>0.270300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8500</td>\n",
       "      <td>0.260600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9000</td>\n",
       "      <td>0.250300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9500</td>\n",
       "      <td>0.260000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10000</td>\n",
       "      <td>0.245300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10500</td>\n",
       "      <td>0.262400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11000</td>\n",
       "      <td>0.247400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11500</td>\n",
       "      <td>0.237900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12000</td>\n",
       "      <td>0.240100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12500</td>\n",
       "      <td>0.210700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13000</td>\n",
       "      <td>0.251200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13500</td>\n",
       "      <td>0.223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14000</td>\n",
       "      <td>0.233500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14500</td>\n",
       "      <td>0.235600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15000</td>\n",
       "      <td>0.229100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15500</td>\n",
       "      <td>0.230500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16000</td>\n",
       "      <td>0.243400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16500</td>\n",
       "      <td>0.207800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17000</td>\n",
       "      <td>0.211100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17500</td>\n",
       "      <td>0.206400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18000</td>\n",
       "      <td>0.221400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18500</td>\n",
       "      <td>0.197000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19000</td>\n",
       "      <td>0.216900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19500</td>\n",
       "      <td>0.216900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20000</td>\n",
       "      <td>0.213000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20500</td>\n",
       "      <td>0.216000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21000</td>\n",
       "      <td>0.215500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21500</td>\n",
       "      <td>0.199600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22000</td>\n",
       "      <td>0.202100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22500</td>\n",
       "      <td>0.228600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table><p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "TrainOutput(global_step=22500, training_loss=0.30138072950575084, metrics={'train_runtime': 43.9328, 'train_samples_per_second': 4097.163, 'train_steps_per_second': 512.145, 'total_flos': 0.0, 'train_loss': 0.30138072950575084, 'epoch': 3.0})"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainer.train()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2734249-2760-4515-bb02-b5c96c6ab7c2",
   "metadata": {},
   "source": [
    "We can test out predictions of the model by running some data through the model:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "712b0729-5a5e-49f3-b617-7a12f6646063",
   "metadata": {},
   "source": [
    "## Checking model results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8655a8e2-5b88-47ea-ba45-ee70bc66b2a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "516d8c81-313d-491e-a3c1-7c7effc861eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch.utils.data import DataLoader\n",
    "\n",
    "example_loader = DataLoader(test_dataset, batch_size=32)\n",
    "\n",
    "example_data = next(iter(example_loader))\n",
    "\n",
    "example_images = example_data[0]\n",
    "example_labels = example_data[1]\n",
    "\n",
    "predicted_labels = model(example_data[0].to(device))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "09879c9b-a7d0-48a5-b78d-79491c7f7a55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1200 with 32 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(4, 8, figsize=(15,12))\n",
    "\n",
    "for i in range(len(example_images)):\n",
    "    plt.subplot(4, 8, i+1)\n",
    "    \n",
    "    image = example_images[i][0]\n",
    "    real_label = example_labels[i]\n",
    "    predicted_label = torch.argmax(predicted_labels[i])\n",
    "    plt.imshow(image)\n",
    "    plt.title(f\"Real: {real_label} Pred: {predicted_label}\")\n",
    "    plt.axis(\"off\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f929687-656c-47c4-86b5-da62693fabac",
   "metadata": {},
   "source": [
    "It looks like our model works as expected."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26616299-d08f-42dd-bd2b-d8924e3d0467",
   "metadata": {},
   "source": [
    "## Customizing Trainer with TrainingArguments\n",
    "\n",
    "Trainer supports customizing most aspects of it via [TrainingArguments](https://huggingface.co/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments).\n",
    "\n",
    "Arguments range from logging configurations to optimizer settings.\n",
    "\n",
    "For example if we want to train for 1 epoch and want output only every 1000 steps, we can configure it easily:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "301d2c6a-1508-47f3-9701-2ea2696f8f4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='7500' max='7500' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [7500/7500 00:14, Epoch 1/1]\n",
       "    </div>\n",
       "    <table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       " <tr style=\"text-align: left;\">\n",
       "      <th>Step</th>\n",
       "      <th>Training Loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1000</td>\n",
       "      <td>0.215100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2000</td>\n",
       "      <td>0.189400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3000</td>\n",
       "      <td>0.206700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4000</td>\n",
       "      <td>0.203200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5000</td>\n",
       "      <td>0.194800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6000</td>\n",
       "      <td>0.192600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7000</td>\n",
       "      <td>0.202900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table><p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "TrainOutput(global_step=7500, training_loss=0.19971505533854167, metrics={'train_runtime': 14.5625, 'train_samples_per_second': 4120.183, 'train_steps_per_second': 515.023, 'total_flos': 0.0, 'train_loss': 0.19971505533854167, 'epoch': 1.0})"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from transformers import TrainingArguments\n",
    "\n",
    "training_args = TrainingArguments(\n",
    "    logging_steps=1000,\n",
    "    num_train_epochs=1\n",
    ")\n",
    "\n",
    "trainer = MNISTTrainer(\n",
    "    model=model,\n",
    "    args=training_args,\n",
    "    train_dataset=train_dataset,\n",
    "    eval_dataset=test_dataset,\n",
    "    data_collator=collator_fn,\n",
    ")\n",
    "\n",
    "trainer.train()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "simple-huggingface",
   "language": "python",
   "name": "simple-huggingface"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
